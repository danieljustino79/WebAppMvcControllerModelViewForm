@{
    ViewBag.Title = "Index";
}

<h2>Operations CRUD</h2>
<p>To perform any operation is necessary a instance class of context in Controller. 
    Class which inherit of DbContext</p>
<b>Class</b>
<pre>public partial class Database1Entities1 : DbContext {...}</pre>
<b>Controller</b>
<pre>Database1Entities1 db = new Database1Entities1();</pre>

<p>@Html.ActionLink("Create New", "Create")</p>
<p>View</p>
<pre>@@using (Html.BeginForm()) {
    @@Html.AntiForgeryToken()
    @@Html.ValidationSummary(true)
&lt;fieldset&gt;
&lt;legend&gt;Log&lt;/legend&gt;
&lt;div class="editor-label"&gt;
    @@Html.LabelFor(model =&gt; model.Name)
&lt;/div&gt;
&lt;div class="editor-field"&gt;
    @@Html.EditorFor(model =&gt; model.Name)
    @@Html.ValidationMessageFor(model =&gt; model.Name)
&lt;/div&gt;
&lt;div class="editor-label"&gt;
    @@Html.LabelFor(model =&gt; model.Date)
&lt;/div&gt;
&lt;div class="editor-field"&gt;
    @@Html.EditorFor(model =&gt; model.Date)
    @@Html.ValidationMessageFor(model =&gt; model.Date)
&lt;/div&gt;
&lt;div class="editor-label"&gt;
    @@Html.LabelFor(model =&gt; model.Priority)
&lt;/div&gt;
&lt;div class="editor-field"&gt;
    @@Html.EditorFor(model =&gt; model.Priority)
    @@Html.ValidationMessageFor(model =&gt; model.Priority)
&lt;/div&gt;
&lt;p&gt;&lt;input type="submit" value="Create" /&gt;&lt;/p&gt;
&lt;/fieldset&gt;
}

@@section Scripts {
    @@Scripts.Render("~/bundles/jqueryval")
}</pre>
<p>Controller</p>
<pre>Database1Entities1 db = new Database1Entities1();
...
public ActionResult Create() {
    return View();
}
[HttpPost]
[ValidateAntiForgeryToken]
public ActionResult Create(Log log) {
    if (ModelState.IsValid) {
        db.Logs.Add(log);
        db.SaveChanges();
        return RedirectToAction("Index/?add=ok");
    }
    return View(log);
}</pre>
<p>Html.BeginForm() submit to self page, but entry in Controller with annotation [HttpPost] and different signature.</p>
<p>Html.AntiForgeryToken() Generates a hidden form field that is validated when the form is submitted.
    This Helper combine with command inner of Controller [ValidateAntiForgeryToken].</p>
<p>If property (ModelState.IsValid) combine, then 2 commands perform db.Logs.Add(log); db.SaveChanges();</p>
<p>Commands Add() and SaveChanges() are namespace System.Data.Entity and class DbSet&lt;TEntity&gt; and DbContext respectively</p>

<hr />
<p>@Html.ActionLink("List", "List")</p>
<p>View</p>
<pre>@@model IEnumerable&lt;webappmvccontrollermodelviewform.models.log&gt;
...
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;@@Html.DisplayNameFor(model =&gt; model.Name)&lt;/th&gt;
&lt;th&gt;@@Html.DisplayNameFor(model =&gt; model.Date)&lt;/th&gt;
&lt;th&gt;@@Html.DisplayNameFor(model =&gt; model.Priority)&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
@@foreach (var item in Model) {
&lt;tr&gt;
&lt;td&gt;@@Html.DisplayFor(modelItem =&gt; item.Name)&lt;/td&gt;
&lt;td&gt;@@Html.DisplayFor(modelItem =&gt; item.Date)&lt;/td&gt;
&lt;td&gt;@@Html.DisplayFor(modelItem =&gt; item.Priority)&lt;/td&gt;
    &lt;td&gt;
        @@Html.ActionLink("Edit", "Edit", new { id=item.Id }) |
        @@Html.ActionLink("Details", "Details", new { id=item.Id }) |
        @@Html.ActionLink("Delete", "Delete", new { id=item.Id })
    &lt;/td&gt;
&lt;/tr&gt;
}
&lt;/table&gt;</pre>
<p>Controller</p>
<pre>public ActionResult List() {
    List&lt;log&gt; list = new List&lt;log&gt;();
    list = db.Logs.ToList();
    return View(list);
}</pre>
<p>Command ToList() is namespace System.Linq static class Enumerable</p>

<hr />
<p>@Html.ActionLink("Edit", "Edit", new{id=1})</p>
<p>View</p>
<pre>@@model WebAppMvcControllerModelViewForm.Models.Log
...                
@@using (Html.BeginForm()) {
    @@Html.AntiForgeryToken()
    @@Html.ValidationSummary(true)
&lt;fieldset&gt;
&lt;legend&gt;Log&lt;/legend&gt;
        @@Html.HiddenFor(model =&gt; model.Id)
&lt;div class="editor-label"&gt;
            @@Html.LabelFor(model =&gt; model.Name)
        &lt;/div&gt;
&lt;div class="editor-field"&gt;
            @@Html.EditorFor(model =&gt; model.Name)
            @@Html.ValidationMessageFor(model =&gt; model.Name)
        &lt;/div&gt;
&lt;div class="editor-label"&gt;
            @@Html.LabelFor(model =&gt; model.Date)
        &lt;/div&gt;
&lt;div class="editor-field"&gt;
            @@Html.EditorFor(model =&gt; model.Date)
            @@Html.ValidationMessageFor(model =&gt; model.Date)
        &lt;/div&gt;
&lt;div class="editor-label"&gt;
            @@Html.LabelFor(model =&gt; model.Priority)
        &lt;/div&gt;
&lt;div class="editor-field"&gt;
            @@Html.EditorFor(model =&gt; model.Priority)
            @@Html.ValidationMessageFor(model =&gt; model.Priority)
        &lt;/div&gt;
&lt;p&gt;
&lt;input type="submit" value="Save" /&gt;
        &lt;/p&gt;
    &lt;/fieldset&gt;
}

@@section Scripts {
    @@Scripts.Render("~/bundles/jqueryval")
}</pre>
<p>Similar Create has 2 Controllers, one to load and outher to submit </p>
<pre>public ActionResult Edit(int id = 0) {
    Log log = db.Logs.Find(id);
    if (log == null)
    {
        return HttpNotFound();
    }
    return View(log);
}

[HttpPost]
public ActionResult Edit(Log log) {
    if (ModelState.IsValid)
    {
        db.Entry(log).State = EntityState.Modified;
        db.SaveChanges();
        return RedirectToAction("Index");
    }
    return View(log);
}</pre>
<p>Command Find() and Entry() are namespace System.Data.Entity and class DbSet&lt;TEntity&gt; and DbContext respectively</p>

<hr />
<p>@Html.ActionLink("Details", "Details", new { id = 1 })</p>
<p>View</p>
<pre>@@model WebAppMvcControllerModelViewForm.Models.Log
...
&lt;fieldset&gt;
&lt;legend&gt;Log&lt;/legend&gt;
&lt;div class="display-label"&gt;
        @@Html.DisplayNameFor(model =&gt; model.Name)
&lt;/div&gt;
&lt;div class="display-field"&gt;
    @@Html.DisplayFor(model =&gt; model.Name)
&lt;/div&gt;
&lt;div class="display-label"&gt;
        @@Html.DisplayNameFor(model =&gt; model.Date)
&lt;/div&gt;
&lt;div class="display-field"&gt;
    @@Html.DisplayFor(model =&gt; model.Date)
&lt;/div&gt;
&lt;div class="display-label"&gt;
        @@Html.DisplayNameFor(model =&gt; model.Priority)
&lt;/div&gt;
&lt;div class="display-field"&gt;
    @@Html.DisplayFor(model =&gt; model.Priority)
&lt;/div&gt;
&lt;/fieldset&gt;</pre>
<p>Controller</p>
<pre>public ActionResult Details(int? id) {
    if (id == null)
    {
        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
    }
    Log log = db.Logs.Find(id);
    if (log == null)
    {
        return HttpNotFound();
    }
    return View(log);
}</pre>
<p>security feature built into the method is that the code verifies that the Find method has found a movie before the code tries to do anything with it</p>

<hr />
<p>Delete</p>
<pre>@model WebAppMvcControllerModelViewForm.Models.Log
...
@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
<p>
    <input type="submit" value="Delete" /> |
    @Html.ActionLink("Back to List", "Index")
</p>
}</pre>
<p>Controller</p>
<pre>public ActionResult Delete(int? id) {
    if (id == null) {
        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
    }
    Log log = db.Logs.Find(id);
    if (log == null)
    {
        return HttpNotFound();
    }
    return View(log);
}

[HttpPost, ActionName("Delete")]
[ValidateAntiForgeryToken]
public ActionResult DeleteConfirmed(int id)
{
    Log log = db.Logs.Find(id);
    db.Logs.Remove(log);
    db.SaveChanges();
    return RedirectToAction("Index/?del=ok");
}</pre>
<p>2 methods for security reasons. 
    The HttpPost method that deletes the data is named DeleteConfirmed to give the HTTP POST method a unique signature or name.
    </p>